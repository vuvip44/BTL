const sequelize = require("../config/db");
const Role = require("../models/Role");
const User = require("../models/User");
const bcrypt = require("bcryptjs");

async function seedData() {
  try {
    await sequelize.sync({ force: false }); // ƒê·∫£m b·∫£o DB ƒë∆∞·ª£c sync

    // üîπ Ki·ªÉm tra v√† t·∫°o Roles
    const roles = ["ADMIN", "USER","TEACHER","STUDENT","PARENT"];
    for (const roleName of roles) {
      const roleExists = await Role.findOne({ where: { name: roleName } });
      if (!roleExists) {
        await Role.create({ name: roleName });
        console.log(`Role ${roleName} ƒë√£ ƒë∆∞·ª£c t·∫°o.`);
      }
    }

    // üîπ L·∫•y ID c·ªßa role ADMIN
    const adminRole = await Role.findOne({ where: { name: "ADMIN" } });

    // üîπ Ki·ªÉm tra & t·∫°o User admin
    const existingAdmin = await User.findOne({ where: { email: "admin@gmail.com" } });
    if (!existingAdmin) {
      const hashedPassword = await bcrypt.hash("123", 10);
      await User.create({
        fullName: "Admin",
        email: "admin@gmail.com",
        username:"admin",
        password: hashedPassword,
        roleId: adminRole.id,
      });
      console.log("User admin ƒë√£ ƒë∆∞·ª£c t·∫°o.");
    } else {
      console.log("User admin ƒë√£ t·ªìn t·∫°i.");
    }

    console.log("Seed d·ªØ li·ªáu ho√†n t·∫•t!");
    process.exit(); // K·∫øt th√∫c ch∆∞∆°ng tr√¨nh sau khi seed xong
  } catch (error) {
    console.error("L·ªói khi seed d·ªØ li·ªáu:", error);
    process.exit(1); // Tho√°t ch∆∞∆°ng tr√¨nh v·ªõi m√£ l·ªói
  }
}

// G·ªçi h√†m seed
seedData();
